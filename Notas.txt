Comandos:

* git init: Empieza repositorio.

* git config: Muestra todas las opciones para configurar Git.
* git config --list: Puedes ver las configuraciones por defecto de git.
* git config --list --show-origin: Muestra donde estan las configuraciones guardadas
* git config --global user.name "David Rodriguez" : Cambias configuracion de usuario de Git.
* git config --global user.email "jdavid.rodriguez.e@gmail.com"

* git add <nombre_archivo>: Alista archivo para enviar a DB del sistema de control de versiones.
* git add -A (git add .): Alista todos los archivos para enviar a DB del sistema de control de versiones.
* git rm -cached <nombre_archivo>: Retira el git add del archivo, sin eliminar el archivo en cuestion.
* git commit -m "mensaje con observaciones de los cambios": Envia ultimos cambios del archivo al sistema de control de versiones, es buena practica ingresar mensaje.
* git status: ver el estado de la BD
* git show: Muestra todos los cambios historicos hechos, con las lineas afectadas y quien las realiz√≥.
* git log <nombre_archivo>: Muestra la historia del archivo.
* git log --stat: Muestra los cambios especificos que se hicieron despues del primer commit.
* git diff: Muestra los cambios que hay en staiging vs los cambios que aun no estan en staiging.
* git diff <sha1> <sha2>: compara las diferencias entre commits
* git reset <sha> --hard: Volver al commit indicado y borra los commits que estan despues del indicado.
* git reset <sha> --soft: Vuelve al commit indicado, pero en el staiging se mantienen los cambios actuales para un posterior commit.
* git  checkout <sha> <nombre_archivo>: Nos muestra como era ese archivo en ese commit, se debe tener cuidado ya que modifica el archivo a como estaba en ese commit, y queda pendiente de que confirmemos el commit para guardar en repositorio.
* git  checkout master <nombre_archivo>: Nos deja el archivo a como estaba en el ultimo commit guardado en repositorio.

* git clone <url repositorio remoto>: Trae archivos de GitHub (o GitLab), a nuestro repositorio local y directorio de trabajo (staiging queda sin modificaciones).
* git push: Envia archivos guardados en nuestro repositorio local al repositorio remoto.
* git fetch: Trae cambios que se hayan realizado en el repositorio remoto al repositorio local, pero no queda e el directorio de trabajo, para ello hay que fusionarlos utilizando git merge.
* git pull: Trae cambios que se hayan realizado en el repositorio remoto al repositorio local y directorio de trabajo.

RAMAS:
  * git branch <nombre>: Crea una rama nueva.
  * git checkout <nombre_rama>: Para moverte a una rama diferente.
